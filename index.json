[{"categories":["kursy","Python"],"content":"Codecademy przy wszystkich swoich zaletach ma czasem ćwiczenia, któe są nudne i strasznie powtarzalne, ale ma też takie, które inspirują żeby zostać z nimi chwilę dłużej i trochę rozbudować. W tym przypadku chodziło o wyciągnięcie ze słownika sztywno przypisanych kluczy razem z wartościami i pokazanie ich w trzech linijkach tekście. ","date":"2020-05-27","objectID":"/hugowie/posts/codecademy-tarot/:1:0","tags":["codecademy","script"],"title":"Tarot z Codecademy","uri":"/hugowie/posts/codecademy-tarot/"},{"categories":["kursy","Python"],"content":"Zwykłe ćwicznie niby nic, ale fakt że wartościami są karty tarota a teksty układają się w prostą “wróżbę”, daje potencjał. Wystarczyło dodać losowanie kart w funkcji (oryginalnie to była lista wybranych wartości) i można się przez chwilę pobawić. Gdybym tylko wiedział co to znaczy, że w przeszłości wychodzi powściągliwość, teraz głupiec, a w przyszłości koło fortuny. ","date":"2020-05-27","objectID":"/hugowie/posts/codecademy-tarot/:1:1","tags":["codecademy","script"],"title":"Tarot z Codecademy","uri":"/hugowie/posts/codecademy-tarot/"},{"categories":["kursy","Python"],"content":"postaw sobie tarota import random tarot = {1: \"The Magician\", 2: \"The High Priestess\", 3: \"The Empress\", 4: \"The Emperor\", 5: \"The Hierophant\", 6: \"The Lovers\", 7: \"The Chariot\", 8: \"Strength\", 9: \"The Hermit\", 10: \"Wheel of Fortune\", 11: \"Justice\", 12: \"The Hanged Man\", 13: \"Death\", 14: \"Temperance\", 15: \"The Devil\", 16: \"The Tower\", 17: \"The Star\", 18: \"The Moon\", 19: \"The Sun\", 20: \"Judgement\", 21: \"The World\", 22: \"The Fool\"} def draw(): hand = [\"past\", \"present\", \"future\"] tell = {} for time in hand: tell[time] = tarot.pop(random.choice(list(tarot.keys()))) for when, card in tell.items(): print(\"Your {0} is the {1} card.\".format(when, card)) draw() ","date":"2020-05-27","objectID":"/hugowie/posts/codecademy-tarot/:1:2","tags":["codecademy","script"],"title":"Tarot z Codecademy","uri":"/hugowie/posts/codecademy-tarot/"},{"categories":["kursy"],"content":"Matlab na forum Coursery w kursie mnóstwo ludzi ma problem z napisaniem pierwszej funkcji w testach - nie otwierają się w edytorze na https://matlab.mathworks.com/ tylko w zwykłym textboksie. Tymczasem… ","date":"2020-05-22","objectID":"/hugowie/posts/matlab-first-function/:0:0","tags":["codecademy","course","snippets","boilerplate"],"title":"Matlab - IDE vs notepad","uri":"/hugowie/posts/matlab-first-function/"},{"categories":["kursy"],"content":"edytor funkcji otwiera się z gotowym szablonem function[outputArg1,outputArg2] =untitled2(inputArg1,inputArg2)%UNTITLED2 Summary of this function goes here % Detailed explanation goes here outputArg1 = inputArg1; outputArg2 = inputArg2; end ","date":"2020-05-22","objectID":"/hugowie/posts/matlab-first-function/:1:0","tags":["codecademy","course","snippets","boilerplate"],"title":"Matlab - IDE vs notepad","uri":"/hugowie/posts/matlab-first-function/"},{"categories":["kursy"],"content":"min i max w ćwiczeniu w środku tygodnia główny cel to chyba zmuszenie ludzi do zajrzenia do dokumentacji, bo ma bardzo niewiele wspólnego z filmami z tego tygodnia function[mmr,mmm] =minimax(M)%UNTITLED Summary of this function goes here % Detailed explanation goes here mmr = transpose(abs(max(M,[],2)-min(M,[],2))); mmm = abs(max(M,[],'all')-min(M,[],'all')); end ","date":"2020-05-22","objectID":"/hugowie/posts/matlab-first-function/:2:0","tags":["codecademy","course","snippets","boilerplate"],"title":"Matlab - IDE vs notepad","uri":"/hugowie/posts/matlab-first-function/"},{"categories":["kursy"],"content":"tworzenie matrycy ćwiczenie na koniec tygodnia - dziwne bo wydaje się o wiele prostsze od poprzedniego. Tym razem bez dokumentacji, za to na podstawie filmów. Zadanie polega na stworzeniu matrycy o wysokości 3*n i szerokości m w której 1/3 wysokości będzie wypełniona jedynkami, potem dwójkami i na końcu trójkami. Główny cel to chyba rozbicie na mniejsze problemy i powtórka z poprzedniego tygodnia (łączenie matryc) function[mat] =trio(n,m)%UNTITLED2 Summary of this function goes here % Detailed explanation goes here mat = [ones(n,m);2*ones(n,m);3*ones(n,m)]; end ","date":"2020-05-22","objectID":"/hugowie/posts/matlab-first-function/:3:0","tags":["codecademy","course","snippets","boilerplate"],"title":"Matlab - IDE vs notepad","uri":"/hugowie/posts/matlab-first-function/"},{"categories":["scripts","JavaScirpt"],"content":"Pierwszy raz z Ruby","date":"2020-05-20","objectID":"/hugowie/posts/js-shorthand/","tags":["codecademy","course","snippets"],"title":"JS - shorthand","uri":"/hugowie/posts/js-shorthand/"},{"categories":["scripts","JavaScirpt"],"content":"Takie ćwiczenie na CodeCademy (część ścieżki więc konieczne do zaliczenia całości) utwórz funkcję, lifePhase(), która na podstawie liczby age, as zwróci opisowy wiek. Schemat: 0-3 'baby' 4-12 'child' 13-19 'teen' 20-64 'adult' 65-140 'senior citizen' jeśli liczba jest mniejsza od 0 lub większa od 140 - 'This is not a valid age' Czasami przy takich rzeczach korzystam z podpowiedzi i zamiast pisać coś prostego wolę to skopiować i wkleić Tym razem hint to: Musisz wielokrotnie wykorzystać if statements. nie pamiętam czy na tym etapie kursu pojawiły się już shorthandy ale spróbuję sobie odświeżyć: function lifePhase(age) { return 0 \u003e age || age \u003e 140 ? \"This is not a valid age\" : age \u003c 4 ? \"baby\" : age \u003c 13 ? \"child\" : age \u003c 20 ? \"teen\" : age \u003c 65 ? \"adult\" : \"senior citizen\"; } https://www.sitepoint.com/shorthand-javascript-techniques/ chyba jednak shorthandy musiały się pojawić bo gdzieś dalej jest; const truthyOrFalsy = (value) =\u003e { if (value) { return true; } return false; }; // As a function declaration: function truthyOrFalsy(value) { if (value) { return true; } else { return false; } } // Using a ternary: const truthyOrFalsy = (value) =\u003e (value ? true : false); a nawet coś w rodzaju: const motivateMe = (adjective, verb, noun) =\u003e `I am so ${adjective}because I ${verb}shorthands! Time to refactor some more long ${noun}!`; a zaraz potem wyjaśnienie że deklaracja funkcji albo łączenie łańcuchów znaków (concatenation) też jest ok. (tylko że tak samo bolesne jak napisanie “łączenie łańcuchów znaków”) const howOld = (age, year) =\u003e { // jaki mamy rok? let dateToday = new Date(); let thisYear = dateToday.getFullYear(); const yeardiff = year - thisYear; const newAge = age + yeardiff; if (newAge \u003c 0) { return `The year ${year}was ${-newAge}years before you were born`; } else if (newAge \u003e age) { return `You will be ${newAge}in the year ${year}`; } else { return `You were ${newAge}in the year ${year}`; } }; ","date":"2020-05-20","objectID":"/hugowie/posts/js-shorthand/:0:0","tags":["codecademy","course","snippets"],"title":"JS - shorthand","uri":"/hugowie/posts/js-shorthand/"},{"categories":["o stronie","hugo"],"content":"first post","date":"2020-05-18","objectID":"/hugowie/posts/hugo-start/","tags":["hugo","bash","organizacja"],"title":"Początki Z Hugo","uri":"/hugowie/posts/hugo-start/"},{"categories":["o stronie","hugo"],"content":"Wreszcie skusiłem się na hugo zamiast jekylla. Całe to “jest napisany w go” powstrzymywało mnie już wystarczająco długo. Zresztą okazuje się że chocolatey instaluje hugo bez problemu, github pages hostuje zgodnie z (instrukcją)[https://gohugo.io/hosting-and-deployment/hosting-on-github/] szybkim skryptem z gałęzią gh-pages w katalogu /public #!/bin/sh # sprawdzenie czy nie ma niezatwierdzonych zmian if [ \"`git status -s`\" ] then echo \"Katalog roboczy nie jest czysty. Zatwierdź zmiany (commit)\" exit 1; fi echo \"Usuwanie poprzedniej wersji\" rm -rf public mkdir public git worktree prune rm -rf .git/worktrees/public/ echo \"Łączenie gałęzi gh-pages z katalogiem public\" git worktree add -B gh-pages public origin/gh-pages echo \"Usuwanie plików z katalogu public\" rm -rf public/* echo \"Generowanie strony\" hugo echo \"Aktualizacja gałęzi gh-pages\" cd public \u0026\u0026 git add --all \u0026\u0026 git commit -m \"Publishing to gh-pages (via publish-gh-pages.sh)\" # push all git push --all ","date":"2020-05-18","objectID":"/hugowie/posts/hugo-start/:0:0","tags":["hugo","bash","organizacja"],"title":"Początki Z Hugo","uri":"/hugowie/posts/hugo-start/"},{"categories":["scripts","Python"],"content":"Couple small scripts for Marketing Analytics calculations Customer Lifetime Value Break Even Units total net profit in Marketing experiments ","date":"2020-04-10","objectID":"/hugowie/posts/python-scripts-marketing/:0:0","tags":["python","script","marketing","coursera"],"title":"Quick and dirty Python scripts","uri":"/hugowie/posts/python-scripts-marketing/"},{"categories":["scripts","Ruby"],"content":"Pierwszy raz z Ruby","date":"2020-04-10","objectID":"/hugowie/posts/ruby-web-scrape/","tags":["ruby","script","web-scraping"],"title":"Ruby - hello world plus","uri":"/hugowie/posts/ruby-web-scrape/"},{"categories":["scripts","Ruby"],"content":"Ruby chciałem wypróbować od kiedy zrobiło się o nim głośno na podcastach TWiT, a potem jeszcze bardziej kiedy przeczytałem Codex. Ale nie było okazji i dopiero dzisiaj wróciłem do tematu. Jak na początek i pierwszy raz - baprawdę szybko poszło. Mój pierwszy w życiu skrypt w Ruby (oparty na dwóch tutorialach) napisałem zanim na dobre zdecydowałem czy lepiej będzie zainstalować Ruby z rbenv czy rvm. ","date":"2020-04-10","objectID":"/hugowie/posts/ruby-web-scrape/:0:0","tags":["ruby","script","web-scraping"],"title":"Ruby - hello world plus","uri":"/hugowie/posts/ruby-web-scrape/"},{"categories":["kursy","Python"],"content":"cała lista new_list = [element.method() for element in old_list] ","date":"2020-03-16","objectID":"/hugowie/posts/python-list-compregension/:0:1","tags":["python","coursera"],"title":"Python: list comprehension","uri":"/hugowie/posts/python-list-compregension/"},{"categories":["kursy","Python"],"content":"wrunkowo z if new_list = [element.method() for element in old_list if element = “chosen”] ","date":"2020-03-16","objectID":"/hugowie/posts/python-list-compregension/:0:2","tags":["python","coursera"],"title":"Python: list comprehension","uri":"/hugowie/posts/python-list-compregension/"},{"categories":["kursy","Python"],"content":"warunkowo z if/else new_list = [element.method() if element != “exception” else element.exception_method() for element in old_list] ","date":"2020-03-16","objectID":"/hugowie/posts/python-list-compregension/:0:3","tags":["python","coursera"],"title":"Python: list comprehension","uri":"/hugowie/posts/python-list-compregension/"},{"categories":["kursy"],"content":"notatki z kursu o git na Courserze","date":"2020-03-03","objectID":"/hugowie/posts/notes-on-git/","tags":["git","vcs","coursera"],"title":"notatki z git","uri":"/hugowie/posts/notes-on-git/"},{"categories":["kursy"],"content":"notatki z kursu o git na Courserze Większość materiałów pochodzi z Coursery ","date":"2020-03-03","objectID":"/hugowie/posts/notes-on-git/:0:0","tags":["git","vcs","coursera"],"title":"notatki z git","uri":"/hugowie/posts/notes-on-git/"},{"categories":["kursy"],"content":"on setting new email and privacy git init git clone URL git init creates .git/ (git directory) in the current directory, the “working tree” is the current/parent directory that contains .git/ The git directory contains all the changes and their history and the working tree contains the current versions of the files. The git directory acts as a database for all the changes tracked in Git and the working tree acts as a sandbox where we can edit the current versions of the files. git add filename adds to the staging area (a file) - an index of what will go to the next commit git status current info git log histor of commits git commit -m 'Commit message' multiline are ususally ok -first as topic git commit -a -m commit previously added skipping staging and after a blank one more detailed description could follow in up to 72 chars ususally because git log commend will not do any line wrapping. tracking lifecycle new files start as untracked git add new_file puts new_file in the staging area (skips modified for new files) tracked: modified \u003e staged \u003e committed git diff filename for diff-like compare ","date":"2020-03-03","objectID":"/hugowie/posts/notes-on-git/:1:0","tags":["git","vcs","coursera"],"title":"notatki z git","uri":"/hugowie/posts/notes-on-git/"},{"categories":["kursy"],"content":"bez git without git there’s still: create diff file diff -u old_file new_ file \u003e change.diff and patch old_file \u003c change.diff to merge diff with original file ","date":"2020-03-03","objectID":"/hugowie/posts/notes-on-git/:2:0","tags":["git","vcs","coursera"],"title":"notatki z git","uri":"/hugowie/posts/notes-on-git/"},{"categories":["kursy"],"content":"Command Explanation \u0026 Link git commit -a Stages files automatically git log -p Produces patch text git show Shows various objects git diff Is similar to the Linux diff command, and can show the differences in various commits git diff –staged An alias to –cached, this will show all staged files compared to the named commit git add -p Allows a user to interactively review patches to add to the current commit git mv Similar to the Linux mv command, this moves a file git rm Similar to the Linux rm command, this deletes, or removes a file There are many useful git cheatsheets online as well. Please take some time to research and study a few, such as this one. ","date":"2020-03-03","objectID":"/hugowie/posts/notes-on-git/:3:0","tags":["git","vcs","coursera"],"title":"notatki z git","uri":"/hugowie/posts/notes-on-git/"},{"categories":["kursy"],"content":".gitignore files .gitignore files are used to tell the git tool to intentionally ignore some files in a given Git repository. For example, this can be useful for configuration files or metadata files that a user may not want to check into the master branch. Check out more at: https://git-scm.com/docs/gitignore. ","date":"2020-03-03","objectID":"/hugowie/posts/notes-on-git/:4:0","tags":["git","vcs","coursera"],"title":"notatki z git","uri":"/hugowie/posts/notes-on-git/"},{"categories":["kursy"],"content":"A few common examples of file patterns to exclude can be found here. ","date":"2020-03-03","objectID":"/hugowie/posts/notes-on-git/:5:0","tags":["git","vcs","coursera"],"title":"notatki z git","uri":"/hugowie/posts/notes-on-git/"},{"categories":["kursy"],"content":"more on git git checkout is effectively used to switch branches. git reset basically resets the repo, throwing away some changes. There are some other useful articles online, which discuss more aggressive approaches to resetting the repo. git commit –amend is used to make changes to commits after-the-fact, which can be useful for making notes about a given commit. git revert makes a new commit which effectively rolls back a previous commit. Itâ€™s a bit like an undo command. There are a few ways you can rollback commits in Git. There are some interesting considerations about how git object data is stored, such as the usage of sha-1. Feel free to read more here: sha-1 sha-1 collision detection on github.com Command Explanation \u0026 Link git branch Used to manage branches git branch name Creates the branch git branch -d name Deletes the branch git branch -D name Forcibly deletes the branch git checkout branch Switches to a branch. git checkout -b branch Creates a new branch and switches to it. git merge branch Merge joins branches together. git merge --abort If there are merge conflicts (meaning files are incompatible), –abort can be used to abort the merge action. git log --graph --oneline This shows a summarized view of the commit history for a repo. ","date":"2020-03-03","objectID":"/hugowie/posts/notes-on-git/:6:0","tags":["git","vcs","coursera"],"title":"notatki z git","uri":"/hugowie/posts/notes-on-git/"},{"categories":["kursy"],"content":"Git Best practices for Collaboration Always sync branches before starting new work Make small commits for separate changes Work on big changes on a separate branch Merge master onto feature often to reduce conflicts With two or more versions use master for latest and a separate branch for stable version Do not rebase changes that were pushed to remote repos Write informative commit messages on merge conflict: disable all added content, test that source works, then re-add step by step conflicts conflicts in cli rebase more on rebase ","date":"2020-03-03","objectID":"/hugowie/posts/notes-on-git/:7:0","tags":["git","vcs","coursera"],"title":"notatki z git","uri":"/hugowie/posts/notes-on-git/"},{"categories":["React"],"content":"quick boilerplates and templates","date":"2019-10-10","objectID":"/hugowie/posts/react-boilerplates/","tags":["react","boilerplate"],"title":"React boilerplates","uri":"/hugowie/posts/react-boilerplates/"},{"categories":["React"],"content":"Komponenty State i Stateless Parent przekazuje stan do Child i renderuje Child. Child renderuje stan otrzymany z Parent ","date":"2019-10-10","objectID":"/hugowie/posts/react-boilerplates/:1:0","tags":["react","boilerplate"],"title":"React boilerplates","uri":"/hugowie/posts/react-boilerplates/"},{"categories":["React"],"content":"Parent # react component import React from 'react' import ReactDOM from 'react-dom' import {Child} from './Child' class Parent extends React.Component { constructor(props) { super(props); this.state = { name: 'Value' }; } render() { return \u003cChild name={this.state.name} /\u003e; } } ReactDOM.render( \u003cParent /\u003e, document.getElementById('app') ) ","date":"2019-10-10","objectID":"/hugowie/posts/react-boilerplates/:1:1","tags":["react","boilerplate"],"title":"React boilerplates","uri":"/hugowie/posts/react-boilerplates/"},{"categories":["React"],"content":"Child import React from 'react'; export class Child extends React.Component { render() { return \u003ch1\u003eHey, my name is {this.props.name}!\u003c/h1\u003e; } }; ","date":"2019-10-10","objectID":"/hugowie/posts/react-boilerplates/:1:2","tags":["react","boilerplate"],"title":"React boilerplates","uri":"/hugowie/posts/react-boilerplates/"}]